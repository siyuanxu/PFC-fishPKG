;fname: monitorIt.p3fis
;------------------------------------------------
def mi_init
  _miCP = contact.find('ball-ball', 1, 2)
  
  command
    set fish callback 42.1 mi_updateLocalSys ; after FDLaw
    history add id 1 fish mi_gc 
    history add id 2 fish mi_Fn
    history add id 3 fish mi_FsMag
    history add id 4 fish mi_delsMag
  end_command
end
;------------------------------------------------
def mi_updateLocalSys  ; Store contact-plane coord. system in extra slots {1,2,3}.
  contact.extra( _miCP, 1 ) = mi_nc
  contact.extra( _miCP, 2 ) = mi_sc
  contact.extra( _miCP, 3 ) = mi_tc
end
;------------------------------------------------
def mi_nc  ; Contact-plane normal direction (n_c)
  mi_nc = contact.normal(_miCP)
end
def mi_sc  ; Contact-plane coord. system (s axis, s_c)
  mi_sc = contact.shear(_miCP)
end
def mi_tc  ; Contact-plane coord. system (t axis, t_c)
  mi_tc = math.cross( mi_nc, mi_sc )
end
;**********
def mi_xc  ; Contact-plane location (xc)
  mi_xc = contact.pos(_miCP)
end
;**********
def mi_FcGbl  ; Contact force (Fc), global system (Fx, Fy, Fz)
  mi_FcGbl = contact.force.global(_miCP)
end
def mi_FcLoc  ; Contact force (Fc), local system (Fn, Fss, Fst) where Fn > 0 is compression
  mi_FcLoc = contact.force.local(_miCP)
end
;**********
def mi_gc  ; Contact gap (gc) where gc > 0 is open
  mi_gc = contact.gap(_miCP)
end
;**********
def mi_FsMag  ; contact shear force magnitude
  mi_FsMag = math.mag( vector( comp( contact.force.local(_miCP), 2 ), ...
                               comp( contact.force.local(_miCP), 3 )  ...
                             )                                        ...
                     )
end
;**********
def mi_Fn  ; contact normal force (positive is tension)
  mi_Fn = -comp( contact.force.local(_miCP), 1 )
end
;**********
def mi_delsMag
  mi_delsMag = _delsMag
end
def mi_update_delsMag ;{i: _zspin}
  local _R2 = math.mag( ball.pos( ball.find(2) ) - mi_xc )
  _delsMag = _delsMag + _zspin*global.timestep*_R2
end

return
;EOF: monitorIt.p3fis
